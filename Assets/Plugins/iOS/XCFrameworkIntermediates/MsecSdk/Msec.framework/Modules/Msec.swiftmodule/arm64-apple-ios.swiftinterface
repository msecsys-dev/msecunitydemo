// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 effective-4.1.50 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Msec
import CommonCrypto
import Darwin
import Foundation
import MachO
@_exported import Msec
import ObjectiveC
import QuartzCore
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct MemoryUsage : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CpuUsage : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PerformanceReport : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PerformanceMonitorDelegate : AnyObject {
  func performanceMonitor(didReport performanceReport: Msec.PerformanceReport)
}
public class MsecNetworkClient {
  public init(broker: Swift.String, publisher: Swift.String, packageName: Swift.String, deviceId: Swift.String, frameworkName: Swift.String, sdkName: Swift.String, sdkVersion: Swift.String, logger: Msec.MsecLogger)
  public func sendMDPSecurityMessage(info: inout Foundation.Data)
  public func sendDeviceInfo(deviceId: Swift.String, bundleId: Swift.String, deviceInfo: Swift.String) -> Swift.Bool
  public func sendMDPMsecMessage(info: inout Foundation.Data)
  public func sendMDPMessage(svc: Swift.String, info: inout Foundation.Data)
  public func verifyDomainCertificate(domain: Swift.String, port: Swift.Int32, deviceId: Swift.String, bundleId: Swift.String) -> Swift.Int32
  public func authenticateDevice(deviceId: Swift.String, bundleId: Swift.String, planConfiguration: inout Msec.sec_plan_configuration_t, authenticationStatus: inout Swift.Int32) -> Swift.String
  public func testMDPClient()
  @objc deinit
}
public typealias FailedCheckType = (check: Msec.FailedCheck, failMessage: Swift.String)
public enum FailedCheck : Swift.CaseIterable {
  case urlSchemes
  case existenceOfSuspiciousFiles
  case suspiciousFilesCanBeOpened
  case restrictedDirectoriesWriteable
  case fork
  case symbolicLinks
  case dyld
  case openedPorts
  case pSelectFlag
  case suspiciousObjCClasses
  public static func == (a: Msec.FailedCheck, b: Msec.FailedCheck) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [Msec.FailedCheck]
  public static var allCases: [Msec.FailedCheck] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
public class IOSSecuritySuite {
  public static func amIJailbroken() -> Swift.Bool
  public static func amIJailbrokenWithFailMessage() -> (jailbroken: Swift.Bool, failMessage: Swift.String)
  public static func amIJailbrokenWithFailedChecks() -> (jailbroken: Swift.Bool, failedChecks: [Msec.FailedCheckType])
  public static func amIRunInEmulator() -> Swift.Bool
  public static func amIDebugged() -> Swift.Bool
  public static func denyDebugger()
  public static func isParentPidUnexpected() -> Swift.Bool
  public static func amITampered(_ checks: [Msec.FileIntegrityCheck]) -> Msec.FileIntegrityCheckResult
  public static func amIReverseEngineered() -> Swift.Bool
  public static func amIReverseEngineeredWithFailedChecks() -> (reverseEngineered: Swift.Bool, failedChecks: [Msec.FailedCheckType])
  public static func amIRuntimeHooked(dyldWhiteList: [Swift.String], detectionClass: Swift.AnyClass, selector: ObjectiveC.Selector, isClassMethod: Swift.Bool) -> Swift.Bool
  public static func amIProxied() -> Swift.Bool
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension Msec.IOSSecuritySuite {
  public static func amIMSHooked(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.Bool
  public static func denyMSHook(_ functionAddress: Swift.UnsafeMutableRawPointer) -> Swift.UnsafeMutableRawPointer?
  public static func denySymbolHook(_ symbol: Swift.String)
  public static func denySymbolHook(_ symbol: Swift.String, at image: Swift.UnsafePointer<MachO.mach_header>, imageSlide slide: Swift.Int)
  public static func getMachOFileHashValue(_ target: Msec.IntegrityCheckerImageTarget = .default) -> Swift.String?
  public static func findLoadedDylibs(_ target: Msec.IntegrityCheckerImageTarget = .default) -> [Swift.String]?
  public static func hasBreakpointAt(_ functionAddr: Swift.UnsafeRawPointer, functionSize: Darwin.vm_size_t?) -> Swift.Bool
  public static func hasWatchpoint() -> Swift.Bool
}
public protocol LogHandler : Msec._SwiftLogSendableLogHandler {
  var metadataProvider: Msec.Logger.MetadataProvider? { get set }
  func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  @available(*, deprecated, renamed: "log(level:message:metadata:source:file:function:line:)")
  func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt)
  subscript(metadataKey _: Swift.String) -> Msec.Logger.Metadata.Value? { get set }
  var metadata: Msec.Logger.Metadata { get set }
  var logLevel: Msec.Logger.Level { get set }
}
extension Msec.LogHandler {
  public var metadataProvider: Msec.Logger.MetadataProvider? {
    get
    set
  }
}
extension Msec.LogHandler {
  @available(*, deprecated, message: "You should implement this method instead of using the default implementation")
  public func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  @available(*, deprecated, renamed: "log(level:message:metadata:source:file:function:line:)")
  public func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt)
}
@preconcurrency public protocol _SwiftLogSendableLogHandler : Swift.Sendable {
}
@_hasMissingDesignatedInitializers public class MsecLogger {
  public func log(level: Swift.String, msg: Swift.String)
  public func trace(msg: Swift.String)
  public func debug(msg: Swift.String)
  public func info(msg: Swift.String)
  public func warning(msg: Swift.String)
  public func notice(msg: Swift.String)
  public func error(msg: Swift.String)
  public func critical(msg: Swift.String)
  @objc deinit
}
public struct Logger {
  @usableFromInline
  internal var handler: any Msec.LogHandler
  public let label: Swift.String
  public var metadataProvider: Msec.Logger.MetadataProvider? {
    get
  }
}
extension Msec.Logger {
  @inlinable public func log(level: Msec.Logger.Level, _ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        if self.logLevel <= level {
            self.handler.log(level: level,
                             message: message(),
                             metadata: metadata(),
                             source: source() ?? Logger.currentModule(fileID: (file)),
                             file: file, function: function, line: line)
        }
    }
  @inlinable public func log(level: Msec.Logger.Level, _ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: level, message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public subscript(metadataKey metadataKey: Swift.String) -> Msec.Logger.Metadata.Value? {
    get {
            return self.handler[metadataKey: metadataKey]
        }
    set {
            self.handler[metadataKey: metadataKey] = newValue
        }
  }
  @inlinable public var logLevel: Msec.Logger.Level {
    get {
            return self.handler.logLevel
        }
    set {
            self.handler.logLevel = newValue
        }
  }
}
extension Msec.Logger {
  @inlinable public func trace(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .trace, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func trace(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.trace(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func debug(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .debug, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func debug(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.debug(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func info(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .info, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func info(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.info(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func notice(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .notice, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func notice(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.notice(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func warning(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .warning, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func warning(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.warning(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func error(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .error, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func error(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.error(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
  @inlinable public func critical(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, source: @autoclosure () -> Swift.String? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.log(level: .critical, message(), metadata: metadata(), source: source(), file: file, function: function, line: line)
    }
  @inlinable public func critical(_ message: @autoclosure () -> Msec.Logger.Message, metadata: @autoclosure () -> Msec.Logger.Metadata? = nil, file: Swift.String = #fileID, function: Swift.String = #function, line: Swift.UInt = #line) {
        self.critical(message(), metadata: metadata(), source: nil, file: file, function: function, line: line)
    }
}
public enum LoggingSystem {
  public static func bootstrap(_ factory: @escaping (Swift.String) -> any Msec.LogHandler)
  public static func bootstrap(_ factory: @escaping (Swift.String, Msec.Logger.MetadataProvider?) -> any Msec.LogHandler, metadataProvider: Msec.Logger.MetadataProvider?)
  public static var metadataProvider: Msec.Logger.MetadataProvider? {
    get
  }
}
extension Msec.Logger {
  public typealias Metadata = [Swift.String : Msec.Logger.MetadataValue]
  public enum MetadataValue {
    case string(Swift.String)
    case stringConvertible(any Swift.CustomStringConvertible & Swift.Sendable)
    case dictionary(Msec.Logger.Metadata)
    case array([Msec.Logger.Metadata.Value])
  }
  public enum Level : Swift.String, Swift.Codable, Swift.CaseIterable {
    case trace
    case debug
    case info
    case notice
    case warning
    case error
    case critical
    public init?(rawValue: Swift.String)
    public typealias AllCases = [Msec.Logger.Level]
    public typealias RawValue = Swift.String
    public static var allCases: [Msec.Logger.Level] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public init(label: Swift.String)
  public init(label: Swift.String, factory: (Swift.String) -> any Msec.LogHandler)
  public init(label: Swift.String, factory: (Swift.String, Msec.Logger.MetadataProvider?) -> any Msec.LogHandler)
  public init(label: Swift.String, metadataProvider: Msec.Logger.MetadataProvider)
}
extension Msec.Logger.Level : Swift.Comparable {
  public static func < (lhs: Msec.Logger.Level, rhs: Msec.Logger.Level) -> Swift.Bool
}
extension Msec.Logger.MetadataValue : Swift.Equatable {
  public static func == (lhs: Msec.Logger.Metadata.Value, rhs: Msec.Logger.Metadata.Value) -> Swift.Bool
}
extension Msec.Logger {
  public struct Message : Swift.ExpressibleByStringLiteral, Swift.Equatable, Swift.CustomStringConvertible, Swift.ExpressibleByStringInterpolation {
    public typealias StringLiteralType = Swift.String
    public init(stringLiteral value: Swift.String)
    public var description: Swift.String {
      get
    }
    public static func == (a: Msec.Logger.Message, b: Msec.Logger.Message) -> Swift.Bool
    public typealias ExtendedGraphemeClusterLiteralType = Msec.Logger.Message.StringLiteralType
    public typealias StringInterpolation = Swift.DefaultStringInterpolation
    public typealias UnicodeScalarLiteralType = Msec.Logger.Message.StringLiteralType
  }
}
public struct MultiplexLogHandler : Msec.LogHandler {
  public init(_ handlers: [any Msec.LogHandler])
  public init(_ handlers: [any Msec.LogHandler], metadataProvider: Msec.Logger.MetadataProvider?)
  public var logLevel: Msec.Logger.Level {
    get
    set
  }
  public var metadataProvider: Msec.Logger.MetadataProvider? {
    get
    set
  }
  public func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
  public var metadata: Msec.Logger.Metadata {
    get
    set
  }
  public subscript(metadataKey metadataKey: Msec.Logger.Metadata.Key) -> Msec.Logger.Metadata.Value? {
    get
    set
  }
}
public struct StreamLogHandler : Msec.LogHandler {
  public static func standardOutput(label: Swift.String) -> Msec.StreamLogHandler
  public static func standardOutput(label: Swift.String, metadataProvider: Msec.Logger.MetadataProvider?) -> Msec.StreamLogHandler
  public static func standardError(label: Swift.String) -> Msec.StreamLogHandler
  public static func standardError(label: Swift.String, metadataProvider: Msec.Logger.MetadataProvider?) -> Msec.StreamLogHandler
  public var logLevel: Msec.Logger.Level
  public var metadataProvider: Msec.Logger.MetadataProvider?
  public var metadata: Msec.Logger.Metadata {
    get
    set
  }
  public subscript(metadataKey metadataKey: Swift.String) -> Msec.Logger.Metadata.Value? {
    get
    set
  }
  public func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata explicitMetadata: Msec.Logger.Metadata?, source: Swift.String, file: Swift.String, function: Swift.String, line: Swift.UInt)
}
public struct SwiftLogNoOpLogHandler : Msec.LogHandler {
  public init()
  public init(_: Swift.String)
  @inlinable public func log(level: Msec.Logger.Level, message: Msec.Logger.Message, metadata: Msec.Logger.Metadata?, file: Swift.String, function: Swift.String, line: Swift.UInt) {}
  @inlinable public subscript(metadataKey _: Swift.String) -> Msec.Logger.Metadata.Value? {
    get {
            return nil
        }
    set {}
  }
  @inlinable public var metadata: Msec.Logger.Metadata {
    get {
            return [:]
        }
    set {}
  }
  @inlinable public var logLevel: Msec.Logger.Level {
    get {
            return .critical
        }
    set {}
  }
}
extension Msec.Logger {
  @inlinable internal static func currentModule(filePath: Swift.String = #file) -> Swift.String {
        let utf8All = filePath.utf8
        return filePath.utf8.lastIndex(of: UInt8(ascii: "/")).flatMap { lastSlash -> Substring? in
            utf8All[..<lastSlash].lastIndex(of: UInt8(ascii: "/")).map { secondLastSlash -> Substring in
                filePath[utf8All.index(after: secondLastSlash) ..< lastSlash]
            }
        }.map {
            String($0)
        } ?? "n/a"
    }
  @inlinable internal static func currentModule(fileID: Swift.String = #fileID) -> Swift.String {
        let utf8All = fileID.utf8
        if let slashIndex = utf8All.firstIndex(of: UInt8(ascii: "/")) {
            return String(fileID[..<slashIndex])
        } else {
            return "n/a"
        }
    }
}
extension Msec.Logger.MetadataValue : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Msec.Logger.MetadataValue.StringLiteralType
  public typealias UnicodeScalarLiteralType = Msec.Logger.MetadataValue.StringLiteralType
}
extension Msec.Logger.MetadataValue : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Msec.Logger.MetadataValue : Swift.ExpressibleByStringInterpolation {
  public typealias StringInterpolation = Swift.DefaultStringInterpolation
}
extension Msec.Logger.MetadataValue : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.String
  public typealias Value = Msec.Logger.Metadata.Value
  public init(dictionaryLiteral elements: (Swift.String, Msec.Logger.Metadata.Value)...)
}
extension Msec.Logger.MetadataValue : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = Msec.Logger.Metadata.Value
  public init(arrayLiteral elements: Msec.Logger.Metadata.Value...)
}
extension Msec.Logger.MetadataValue : Swift.Sendable {
}
extension Msec.Logger : Swift.Sendable {
}
extension Msec.Logger.Level : Swift.Sendable {
}
extension Msec.Logger.Message : Swift.Sendable {
}
@_hasMissingDesignatedInitializers public class MsecSecurityAgent {
  open func getDeviceId() -> Swift.String
  open func getBundleId() -> Swift.String
  open func startTaskManager(networkClient: Msec.MsecNetworkClient)
  open func authenticateDevice()
  public func getCurrentDeviceInfo()
  public func isJailbroken() -> Swift.Bool
  public func isReverseEngineering() -> Swift.Bool
  public func isDebuggable() -> Swift.Bool
  public func isMemoryHooked() -> Swift.Bool
  public func isEmulator() -> Swift.Bool
  @objc deinit
}
public class MsecSdk {
  public init(broker: Swift.String, publisher: Swift.String, appVersion: Swift.String, frameworkName: Swift.String, sdkName: Swift.String, sdkVersion: Swift.String)
  public func verifyDomainCertificate(domain: Swift.String, port: Swift.Int32) -> Swift.Bool
  public func getDeviceSessionKey() -> Swift.String
  public func isJailbroken() -> Swift.Bool
  public func isDebuggable() -> Swift.Bool
  public func isMemoryHooked() -> Swift.Bool
  public func isReverseEngineering() -> Swift.Bool
  public func isEmulator() -> Swift.Bool
  @objc deinit
}
extension Msec.Logger {
  public struct MetadataProvider {
    @usableFromInline
    internal let _provideMetadata: () -> Msec.Logger.Metadata
    public init(_ provideMetadata: @escaping () -> Msec.Logger.Metadata)
    public func get() -> Msec.Logger.Metadata
  }
}
extension Msec.Logger.MetadataProvider {
  public static func multiplex(_ providers: [Msec.Logger.MetadataProvider]) -> Msec.Logger.MetadataProvider?
}
public enum FileIntegrityCheck {
  case bundleID(Swift.String)
  case mobileProvision(Swift.String)
  case machO(Swift.String, Swift.String)
}
extension Msec.FileIntegrityCheck {
  public var description: Swift.String {
    get
  }
}
public typealias FileIntegrityCheckResult = (result: Swift.Bool, hitChecks: [Msec.FileIntegrityCheck])
public enum IntegrityCheckerImageTarget {
  case `default`
  case custom(Swift.String)
}
extension Msec.FailedCheck : Swift.Equatable {}
extension Msec.FailedCheck : Swift.Hashable {}
extension Msec.Logger.Level : Swift.Hashable {}
extension Msec.Logger.Level : Swift.RawRepresentable {}
extension Msec.Logger.MetadataProvider : Swift.Sendable {}
